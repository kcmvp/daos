// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: internal/daos.proto

package internal

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DaosClient is the client API for Daos service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DaosClient interface {
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error)
	Indexes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*IndexResponse, error)
}

type daosClient struct {
	cc grpc.ClientConnInterface
}

func NewDaosClient(cc grpc.ClientConnInterface) DaosClient {
	return &daosClient{cc}
}

func (c *daosClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/internal.Daos/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daosClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/internal.Daos/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daosClient) Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error) {
	out := new(SetResponse)
	err := c.cc.Invoke(ctx, "/internal.Daos/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daosClient) Indexes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*IndexResponse, error) {
	out := new(IndexResponse)
	err := c.cc.Invoke(ctx, "/internal.Daos/Indexes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DaosServer is the server API for Daos service.
// All implementations must embed UnimplementedDaosServer
// for forward compatibility
type DaosServer interface {
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Set(context.Context, *SetRequest) (*SetResponse, error)
	Indexes(context.Context, *emptypb.Empty) (*IndexResponse, error)
	mustEmbedUnimplementedDaosServer()
}

// UnimplementedDaosServer must be embedded to have forward compatible implementations.
type UnimplementedDaosServer struct {
}

func (UnimplementedDaosServer) Search(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedDaosServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDaosServer) Set(context.Context, *SetRequest) (*SetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedDaosServer) Indexes(context.Context, *emptypb.Empty) (*IndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Indexes not implemented")
}
func (UnimplementedDaosServer) mustEmbedUnimplementedDaosServer() {}

// UnsafeDaosServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DaosServer will
// result in compilation errors.
type UnsafeDaosServer interface {
	mustEmbedUnimplementedDaosServer()
}

func RegisterDaosServer(s grpc.ServiceRegistrar, srv DaosServer) {
	s.RegisterService(&Daos_ServiceDesc, srv)
}

func _Daos_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaosServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Daos/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaosServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daos_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaosServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Daos/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaosServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daos_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaosServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Daos/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaosServer).Set(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daos_Indexes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaosServer).Indexes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Daos/Indexes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaosServer).Indexes(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Daos_ServiceDesc is the grpc.ServiceDesc for Daos service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Daos_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "internal.Daos",
	HandlerType: (*DaosServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _Daos_Search_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Daos_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _Daos_Set_Handler,
		},
		{
			MethodName: "Indexes",
			Handler:    _Daos_Indexes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/daos.proto",
}
